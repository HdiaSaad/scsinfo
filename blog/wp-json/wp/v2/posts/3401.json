{"id":3401,"date":"2015-01-05T13:16:17","date_gmt":"2015-01-05T18:16:17","guid":{"rendered":"http:\/\/www.unifiedinfotech.net\/?p=3401"},"modified":"2022-05-20T08:31:19","modified_gmt":"2022-05-20T12:31:19","slug":"swift-development-services-apples-journey-from-swift-to-objective-c","status":"publish","type":"post","link":"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/","title":{"rendered":"Swift Development Services"},"content":{"rendered":"<p style=\"text-align: justify;\">Back in 2008, Apple announced and released iPhone SDK 2.0. With this event sparked yet another revolution in software development, giving birth to a new breed of developers, called the iOS developers.<\/p>\n<p style=\"text-align: justify;\">Many developers among them never used Objective-C prior to that and it was the first challenge Apple blew out to them. Despite the unfamiliar syntax and manual memory management, it was successful enough to populate the App Store with ten thousand apps. Apple kept on improving Objective-C and with each release, kept on adding block and literals, simplified memory management with automatic reference counting, and many other features pinpointing a modern programming language.<\/p>\n<p style=\"text-align: justify;\"><img loading=\"lazy\" class=\"aligncenter size-full\" src=\"https:\/\/www.unifiedinfotech.net\/blog\/wp-content\/uploads\/2019\/02\/swift-objective-c-comparison-1.png\" alt=\"swift-objective-c-comparasion\" width=\"590\" height=\"277\" \/><\/p>\n<p style=\"text-align: justify;\">In 2010, when iPhone was just 3 years old, the ability to code native apps was still nascent and iPhone came up with version 4 of the iPhone OS that included tantalizing new features like multitasking, fast app switching, and background services. Apple came back with a bombshell in iPhone OS 4 SDK and it was not in the software but in the usage agreement. It stated &#8211;<\/p>\n<p style=\"text-align: justify;\">\u201c<i>Applications must be originally written in Objective-C, C and C++, and only code written in C, C++, and Objective-C may compile and directly link against the Documented APIs.\u201d <\/i>\u2013 Section 3.3.1 of the iPhone OS 4 SDK Developer Agreement.<\/p>\n<p style=\"text-align: justify;\">This new restriction took developers by surprise, but we heard Steve Jobs claiming it as a step to prevent the usage of cross-platform tools. However, Objective-C contributed largely towards the growth of the app ecosystem, but many developers started feeling dissatisfied in 2010 as a result alternative ways to write iPhone apps in other programming languages were cropping up.<\/p>\n<p style=\"text-align: justify;\">After working with Objective-C for past 6 years, Apple decided to throw away yet another challenge this year in 2014 at WWDC. Yes, once again the iOS developers will need to learn an entirely new language called the <a href=\"https:\/\/developer.apple.com\/swift\/\" target=\"_blank\">Swift<\/a>.<\/p>\n<p style=\"text-align: justify;\"><b>Swift \u2013 The New Apple Language <\/b><\/p>\n<p style=\"text-align: justify;\"><img loading=\"lazy\" class=\"aligncenter size-full \" src=\"https:\/\/www.unifiedinfotech.net\/blog\/wp-content\/uploads\/2019\/02\/Learn-Swift-Programming-Language-1.png\" alt=\"Learn-Swift-Programming-Language\" width=\"728\" height=\"450\" \/><\/p>\n<p style=\"text-align: justify;\">Four years after 2010, Apple introduced developers to its new language, Swift. And this proved that Apple was ready to accept the truth that Objective-C might not be the best language for writing mobile apps. Swift is more a modern language compared to Objective-C. If new to Swift then you would have keen interest to know how to move from Objective-C to Swift.<\/p>\n<p style=\"text-align: justify;\"><strong>You would notice two important differences between Swift and Objective-C \u2013<\/strong><\/p>\n<p style=\"text-align: justify;\"><b>Swift is not a strict superset of the C language<\/b> \u2013 This denotes that Swift is free to make use of syntax constructs that was not in use. This helps to implement custom operators in Swift.<\/p>\n<p style=\"text-align: justify;\"><b>Swift is not dynamically typed, but typed statically<\/b> \u2013 Statically typed means you can take the advantage of pioneered languages such as Haskell.<\/p>\n<p style=\"text-align: justify;\"><b>The Swift Launch Pad<\/b><\/p>\n<p style=\"text-align: justify;\">In order to start exploring Swift you need to download <b>XCode 6<\/b> from App Store and start experimenting. You can go to the home page of Apple\u2019s Swift to find the best reference to facilitate <a href=\"https:\/\/www.unifiedinfotech.net\/services\/ios-app-development\/\" target=\"_blank\"><b>Swift Development Services<\/b><\/a>. To create a playground for your Swift Development here is a guide &#8211;<br \/>\n<b>Variables and Constants<\/b><br \/>\nDeclaring a variable in Swift profusely uses the VAR keyword.<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">var y = 1<br \/>\nvar z = &#8220;Hello&#8221;<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">We choose two variable \u201cy\u201d and \u201cz\u201d. Swift is a safe language, it will deduce variable types from the assigned values. If you wish to make codes more readable, you can annotate the variable\u2019s type.<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">var y: Int<br \/>\ny = 2<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">Constants are more or less similar, but you declare them using LET instead of VAR. The value of a constant does not need to be known at a compile time, but you must assign the value once.<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">let c1 = 1 \/\/ Constant known at compile time<br \/>\nvar v = arc4random()<br \/>\nlet c2 = v \/\/ Constant known only at run time<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\"><strong>As their number suggest they are immutable so following the code is surely going to cause a compile-time error.<\/strong><\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">let c = 1<br \/>\nc = 3 \/\/ error<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">You can also declare other types as constant. As in this example, you can find that the following code an array declared as constant and if you try to modify it, the Swift compiler would fire an error:<\/p>\n<p style=\"text-align: justify;\">Other types can also be declared as constant. For example, the following code declares an array as a constant, and if you attempt to modify any of the elements, the Swift compiler will report an error:<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">var arr2 = [4, 5, 6]<br \/>\narr2[0] = 8<br \/>\nprint (arr2) \/\/ [8, 5, 6]<br \/>\nlet arr = [1, 2, 3]<br \/>\na[0] = 5 \/\/ error<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\"><b>Optionals<\/b><\/p>\n<p style=\"text-align: justify;\">You need to initialize constants when you declare them and for variables, you need to initialize them before you use. You cannot find it in Objective-C, but in Swift since <b>optional values<\/b> can have a value or be nil, but Objective-C cannot be nil equivalent. Look at the following code you will notice that that \u201cx\u201d assigned an optional value of 2015 at the same time this means Swift compiler was aware that \u201cx\u201d might be nil.<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">var s = &#8220;2015&#8221;<br \/>\nvar x = s.toInt()<br \/>\nprint(x) \/\/ Optional(2015)<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">If you introduce changes in this code and assign value \u201cxyz\u201d to \u201cs\u201d which cannot convert to integer, you will notice that \u201cx\u201d becomes <b>NIL<\/b>.<\/p>\n<table dir=\"LTR\" border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">var s = &#8220;abc&#8221;<br \/>\nvar x = s.toInt()<br \/>\nprint(x) \/\/ nil<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">The return type of \u201ctoInt()\u201d function is \u201cInt?\u201d which serves as the <b>optional \u201cInt\u201d<\/b>. Let us now consider a standard function on \u201cx\u201d:<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">var x = &#8220;2015&#8221;.toInt()<br \/>\nprint(x.successor()) \/\/ error<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">Now the compiler sends signals as error, since \u201cx\u201d is <b>optional and potentially NIL<\/b>, we have to test \u201cx\u201d first and make sure that the successor function invokes a real number and not a NIL value.<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">var x = &#8220;2014&#8221;.toInt()<br \/>\nif x != nil<br \/>\n{<br \/>\nPrint(x!.successor()) \/\/ 2015<br \/>\n}<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">We have to <b>unwrap \u201cx\u201d by appending it with an exclamation mark (!)<\/b>. When we get sure that \u201cx\u201d contains a value we can easily access it, otherwise we can get runtime error. We also perform that function which Swift calls as <b>optional binding<\/b>, converting optional into a non-optional variable.<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">let x = &#8220;123&#8221;.toInt()<br \/>\nif let y = x<br \/>\n{<br \/>\nprint(y)<br \/>\n}<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">The code will run if the \u201cx\u201d has a value to execute and will assign it to \u201cy\u201d. We do not need to unwrap \u201cy\u201d for that, as it is not optional as \u201cx\u201d is not NIL.Look at the Apple manual to read more details about <a href=\"https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/OptionalChaining.html\" target=\"_blank\"><b>Optional Chaining<\/b><\/a>.<\/p>\n<p style=\"text-align: justify;\"><b>String Interpolation<\/b><br \/>\n<strong>When you use Objective-C, you usually do it with \u201cstringWithFormat:\u201d method<\/strong><\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">NSString *user = @&#8221;Gabriel&#8221;;<br \/>\nint days = 3;<br \/>\nNSString *s = [NSString stringWithFormat:@&#8221;posted by %@ (%d days ago)&#8221;, user, days];<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\"><strong>Swift has a feature called string interpolation to do the same function, but it is easier to do and refined.<\/strong><\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">let user = &#8220;Gabriel&#8221;<br \/>\nlet days = 3let s = &#8220;posted by \\(user) \\(days) ago&#8221;<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\"><strong>You can also use expressions such as:<\/strong><\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">let width = 2<br \/>\nlet height = 3<br \/>\nlet s = &#8220;Area for square with sides \\(width) and \\(height) is \\(width*height)&#8221;<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">Read more on <a href=\"https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/StringsAndCharacters.html\" target=\"_blank\"><b>string interpolation<\/b><\/a> at Apple.<\/p>\n<p style=\"text-align: justify;\"><b>Functions<\/b><br \/>\nFrom Objective-C, the definition of function is different in Swift. Here is a sample function:<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">func someFunction(s:String, i: Int) -&gt; Bool<br \/>\n{<br \/>\n&#8230; \/\/ code}<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\"><b>In Swift, the functions are of first-class types<\/b>. This indicates that you can assign functions to variables, pass them as parameters to other functions, and make them returns types:<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">func stringLength(s:String) -&gt; Int<br \/>\n{<br \/>\nreturn countElements(s)<br \/>\n}<br \/>\nfunc stringValue(s:String) -&gt; Int<br \/>\n{<br \/>\nif let x = s.toInt()<br \/>\n{<br \/>\nreturn x<br \/>\n}<br \/>\nreturn 0<br \/>\n}<br \/>\nfunc doSomething(f:String -&gt; Int, s:String) -&gt; Int<br \/>\n{<br \/>\nreturn f(s).successor()<br \/>\n}<br \/>\nlet f1 = stringLength<br \/>\nlet f2 = stringValue<br \/>\ndoSomething(f1, &#8220;123&#8221;) \/\/ 4<br \/>\ndoSomething(f2, &#8220;123&#8221;) \/\/ 124<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">Again, in Swift you will find types of f1 and f2, although it is not possible to define them explicitly.<br \/>\n<strong>Functions can also return other functions:<\/strong><\/p>\n<table dir=\"LTR\" border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\" align=\"LEFT\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">let f1:String -&gt; Int = stringLength<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">func compareGreaterThan(a: Int, b: Int) -&gt; Bool<br \/>\n{<br \/>\nreturn a &gt; b<br \/>\n}<br \/>\nfunc compareLessThan(a: Int, b: Int) -&gt; Bool<br \/>\n{<br \/>\nreturn a &lt; b<br \/>\n}<br \/>\nfunc comparator(greaterThan:Bool) -&gt; (Int, Int) -&gt; Bool<br \/>\n{<br \/>\nif greaterThan<br \/>\n{<br \/>\nreturn compareGreaterThan<br \/>\n}<br \/>\nelse<br \/>\n{<br \/>\nreturn compareLessThan<br \/>\n}<br \/>\n}<br \/>\nlet f = comparator(true)<br \/>\nprintln(f(5, 9))<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">Get to know more about functions at <a href=\"https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/Functions.html\" target=\"_blank\"><b>Apple\u2019s Library<\/b><\/a>.<\/p>\n<p style=\"text-align: justify;\"><b>Enumerations<\/b><br \/>\nEnumerations in Swift are powerful compared to Objective-C. Swift easily forms a structure, they can have methods to lie down and passes value:<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">enum MobileDevice : String<br \/>\n{<br \/>\ncase iPhone = &#8220;iPhone&#8221;, Android = &#8220;Android&#8221;, WP8 = &#8220;Windows Phone8&#8221;, BB = &#8220;BlackBerry&#8221;<br \/>\nfunc name() -&gt; String<br \/>\n{<br \/>\nreturn self.toRaw()<br \/>\n}<br \/>\n}<br \/>\nlet m = MobileDevice.Android<br \/>\nprint(m.name()) \/\/ &#8220;Android&#8221;<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">Compared to Objective-C, the enumerations in Swift can assign Strings, characters or floats as values for each member apart from the integers. You can find the convenient \u201ctoRaw()\u201d method that returns the value assigned to each member. Enumerations also include parameters &#8211;<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">enum Location<br \/>\n{<br \/>\ncase Address(street:String, city:String)<br \/>\ncase LatLon(lat:Float, lon:Float)<br \/>\nfunc description() -&gt; String<br \/>\n{<br \/>\nswitch self<br \/>\n{<br \/>\ncase let .Address(street, city):<br \/>\nreturn street + &#8220;, &#8221; + city<br \/>\ncase let .LatLon(lat, lon):<br \/>\nreturn &#8220;(\\(lat), \\(lon))&#8221;<br \/>\n}<br \/>\n}<br \/>\n}<br \/>\nlet loc1 = Location.Address(street: &#8220;20, Connaught Place&#8221;, city: &#8220;New Delhi&#8221;)<br \/>\nlet loc2 = Location.LatLon(lat: 28.6328, lon: 77.2197)<br \/>\nprint(loc1.description()) \/\/ &#8220;20, Connaught Place, New Delhi &#8221;<br \/>\nprint(loc2.description()) \/\/ &#8220;(28.6328, 77.2197)&#8221;<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">Get information about enumerations <a href=\"https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/Enumerations.html\" target=\"_blank\"><b>here<\/b><\/a>.<\/p>\n<p style=\"text-align: justify;\"><b>Tuples<\/b><br \/>\nTuples are a group of several values turns into a single compound value. You can find that the value within the Tuples can be of any type and do not have to be of same type as each other.<\/p>\n<table width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">let person = (&#8220;Thomas&#8221;, &#8220;Hardy&#8221;)print(person.0) \/\/ Thomas<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\"><strong>You can also name the individual elements in Tuple:<\/strong><\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">let person = (first: &#8221; Thomas &#8220;, last: &#8221; Hardy&#8221;)print(person.first)<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\"><strong>Tuples are extremely convenient options as their return types for functions that return more than one value.<\/strong><\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">func intDivision(a: Int, b: Int) -&gt; (quotient: Int, remainder: Int)<br \/>\n{<br \/>\nreturn (a\/b, a%b)<br \/>\n}<br \/>\nprint(intDivision(11, 3)) \/\/ (3, 2)<br \/>\nlet result = intDivision(15, 4)<br \/>\nprint(result.remainder) \/\/ 3<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\"><strong>Swift supports a pattern matching a switch statement, which you cannot find in Objective-C.<\/strong><\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">let complex = (2.0, 1.1) \/\/ real and imaginary partsswitch complex<br \/>\n{<br \/>\ncase (0, 0):<br \/>\nprintln(&#8220;Number is zero&#8221;)<br \/>\ncase (_, 0):<br \/>\nprintln(&#8220;Number is real&#8221;)<br \/>\ndefault:<br \/>\nprintln(&#8220;Number is imaginary&#8221;)<br \/>\n}<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">In the second example, we do not look into the number, so we use _ to match. You can also check additional conditions in each case as well. For that instance, we need to bind the pattern value to constants:<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">let complex = (2.0, 1.1)<br \/>\nswitch complex<br \/>\n{<br \/>\ncase (0, 0):<br \/>\nprintln(&#8220;Number is zero&#8221;)<br \/>\ncase (let a, 0) where a &gt; 0:<br \/>\nprintln(&#8220;Number is real and positive&#8221;)<br \/>\ncase (let a, 0) where a &lt; 0:<br \/>\nprintln(&#8220;Number is real and negative&#8221;)<br \/>\ncase (0, let b) where b != 0:<br \/>\nprintln(&#8220;Number has only imaginary part&#8221;)<br \/>\ncase let (a, b):<br \/>\nprintln(&#8220;Number is imaginary with distance \\(a*a + b*b)&#8221;)<br \/>\n}<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">To know more on Tuples browse the <a href=\"https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/TheBasics.html\" target=\"_blank\"><b>Apple Library<\/b><\/a>.<\/p>\n<p style=\"text-align: justify;\"><b>Classes <\/b><br \/>\nSwift does not require creating separate interfaces and implementing files for customized class or structures. In Swift, you can easily define a class or a structure within a single file and the external interface to that class or structure is made available automatically for other code to use.<\/p>\n<p style=\"text-align: justify;\"><strong>Class definitions are very simple in Swift:<\/strong><\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">class Bottle<br \/>\n{<br \/>\nvar volume: Int = 600func description() -&gt; String<br \/>\n{<br \/>\nreturn &#8220;This bottle has \\(volume) ml&#8221;<br \/>\n}<br \/>\n}<br \/>\nlet b = Bottle()<br \/>\npri<br \/>\nnt(b.description())<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">As you can see, declaration and implementation are in the same file. Swift no longer uses header and implementation files. Let us add a label to our example:<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">class Bottle<br \/>\n{<br \/>\nvar volume: Int = 600<br \/>\nvar label:String<br \/>\nfunc description() -&gt; String<br \/>\n{<br \/>\nreturn &#8220;This bottle of \\(label) has \\(volume) ml&#8221;<br \/>\n}<br \/>\n}<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\"><strong>The compiler will report the label is a non-optional variable and will not hold any value when a Bottle initialize.<\/strong><\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">class Bottle<br \/>\n{<br \/>\nvar volume: Int = 600<br \/>\nvar label:String<br \/>\ninit(label:String)<br \/>\n{<br \/>\nself.label = label}<br \/>\nfunc description() -&gt; String<br \/>\n{<br \/>\nreturn &#8220;This bottle of \\(label) has \\(volume) ml&#8221;<br \/>\n}<br \/>\n}<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">Well, we can also use optional type for a property we do not need to initialize that. In the following example, we made volume as the optional integer.<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">class Bottle{<br \/>\nvar volume: Int?<br \/>\nvar label:String<br \/>\ninit(label:String)<br \/>\n{<br \/>\nself.label = label<br \/>\n}<br \/>\nfunc description() -&gt; String<br \/>\n{<br \/>\nif self.volume != nil<br \/>\n{<br \/>\nreturn &#8220;This bottle of \\(label) has \\(volume!) ml&#8221;<br \/>\n}<br \/>\nelse<br \/>\n{<br \/>\nreturn &#8220;A bootle of \\(label)&#8221;<br \/>\n}<br \/>\n}<br \/>\n}<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\"><b>Structures<\/b><br \/>\nSwift also has structures just like Objective-C but it more flexible. Look at this example to get to know what structure defines in Swift:<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">struct Seat<br \/>\n{<br \/>\nvar row: Int<br \/>\nvar letter:String<br \/>\ninit (row: Int, letter:String)<br \/>\n{<br \/>\nself.row = row<br \/>\nself.letter = letter<br \/>\n}<br \/>\nfunc description() -&gt; String<br \/>\n{<br \/>\nreturn &#8220;\\(row)-\\(letter)&#8221;<br \/>\n}<br \/>\n}<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\"><b>Structures<\/b><\/p>\n<p style=\"text-align: justify;\">Swift has structures that have methods, properties and intializers and some protocols as well. The difference between classes and structures is that classes pass on reference but structures pass by value.<\/p>\n<table border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">let b = Bottle()<br \/>\nprint(b.description()) \/\/ &#8220;b&#8221; bottle has 1000 ml<br \/>\nvar b2 = b<br \/>\nb.volume = 750<br \/>\nprint(b2.description()) \/\/ &#8220;b&#8221; and &#8220;b2&#8221; bottles have 750 ml<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">If we try out the similar case for instance with the structures, you will notice that it will pass by values:<\/p>\n<table dir=\"LTR\" border=\"1\" width=\"638\" cellspacing=\"0\" cellpadding=\"7\">\n<tbody>\n<tr>\n<td valign=\"TOP\" width=\"622\">var s1 = Seat(row: 14, letter:&#8221;A&#8221;)<br \/>\nvar s2 = s1<br \/>\ns1.letter = &#8220;B&#8221;<br \/>\nprint(s1.description()) \/\/ 14-B<br \/>\nprint(s2.description()) \/\/ 14-A<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p style=\"text-align: justify;\">Now, a question arises when we should use class or structure. In Objective-C and C, we used structures when we need to group multiple values and copy them rather than reference For example, complex numbers, 2D or 3D points, etc. However, class is traditionally the object. In Swift, we have seen that class and structure compared closely to other languages and much functionality can apply to either of the class or structure. As a result, general term used in Swift reference is \u201cinstance\u201d which doth applies in any of these two.<\/p>\n<p style=\"text-align: justify;\">You can read about Classes and Structures of swift at <b><a href=\"https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/ClassesAndStructures.html\" target=\"_blank\">Apple Library<\/a>.<\/b><\/p>\n<p style=\"text-align: justify;\"><b>Finding the Compatibility of Objective-C and Swift <\/b><\/p>\n<ul style=\"text-align: justify;\">\n<li style=\"list-style-type: none;\">\n<ul>\n<li><strong>A<\/strong>. iOS shares a common background with OS X and both hang on with the NeXTSTEP OS released in 1989. The later written in Objective-C and many of the core libraries trace their roots in these original implementations. Swift does not have its roots their but in future it will have to interface Objective-C.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<ul style=\"text-align: justify;\">\n<li style=\"list-style-type: none;\">\n<ul>\n<li><strong>B<\/strong>. Swift has enabled painless interactions with Objective-C, but that does not denote the process to be painless. Apple has given access to a helpful <a href=\"https:\/\/developer.apple.com\/documentation\/swift#2984801\" target=\"_blank\"><b>guide<\/b><\/a> that explains how to call Objective-C code from Swift and vice versa. You will also come across some important impedance mismatch and must stay aware of them.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<ul style=\"text-align: justify;\">\n<li style=\"list-style-type: none;\">\n<ul>\n<li><strong>C<\/strong>. The most obvious mismatch that you might find here relates to the header files. Objective-C that has its root in C still needs their functioned to declare rather calling them. When you can out to a library, you would find the declarations found in the library\u2019s header files. As for Swift, they do not use header files. If you want to call Swift Code from Objective-C, you need to create bridging header. Conceptually this may not seem complex, but it can be a tough task.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<ul style=\"text-align: justify;\">\n<li style=\"list-style-type: none;\">\n<ul>\n<li><strong>D<\/strong>. Another set of complication between Swift and Objective-C lies in their type systems. Swift that takes a various concept from other modern languages done away with the concept of <b>NIL<\/b>. In its place come Swift\u2019s optional types. As for example, a method used to open a file only if it already exists would have a return type of a \u201cFile?\u201d in Swift. By tacking all those places where types are optional, Swift compiler can effectively make it possible to encounter dreaded \u201cNull Pointer Error\u201d. Objective-C makes no guarantee about not returning nil. Rather Swift comes with special category of types called Implicitly Unwrapped Optional often used to call Objective-C code. These types treated as optional in Swift, along with overhead required for existence checking. You can use it alternately and can use the same as non-optional type, but if Objective-C does return, a \u201cnil\u201d will end up with a runtime error. Therefore, there are chances some of Swift\u2019s compile-time safety guarantees.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<ul style=\"text-align: justify;\">\n<li style=\"list-style-type: none;\">\n<ul>\n<li><strong>E<\/strong>. Another subtle mismatch between Swift and Objective-C has to do away with how objects and classes created under the covers in the two programming languages from Apple. Objective-C due to their dynamic nature utilizes the dynamic dispatch to call methods on objects (via \u201cobjc_msgSend\u201d). Swift definitely uses dynamic dispatch, but since it is statically typed it also get the option of using a \u201cvtable\u201d to store function pointers for each calling method. The two mechanisms that Swift uses depend on a number of factors Plane Old Swift Objects will use the \u201cvtable\u201d mechanism, unless the class or methods within the class annotates using the \u201c@objc\u201d Swift attribute.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<ul style=\"text-align: justify;\">\n<li style=\"list-style-type: none;\">\n<ul>\n<li><strong>F<\/strong>. Swift classes that have a chance to inherit from Objective-C classes will use dynamic dispatch for inherited methods. However, it is not possible for any new methods introduced by the subclass (well, you can force the use of dynamic dispatch with the \u201c@objc\u201d attribute). It is needless to say Swift code will be able to work with Swift classes, but Objective-C code can only utilize Swift objects and methods if annotated.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p style=\"text-align: justify;\">Swift is evolving daily at Apple\u2019s Lab. You would come across a number of new things to learn about Swift. These include Generics, interaction with Objective-C libraries, closures, optional chaining, and operator overloading. It is not possible to discuss all of them in one article to describe thoroughly a new language.<\/p>\n<p style=\"text-align: justify;\">Well, this quick read will help many developers get to know Objective-C, especially for those who have not yet managed time to learn details of Swift language can get on track.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Back in 2008, Apple announced and released iPhone SDK 2.0. With this event sparked yet another revolution in software development, giving birth to a new breed of developers, called the iOS developers. Many developers among them never used Objective-C prior to that and it was the first challenge Apple blew out to them. Despite the [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":3402,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,144],"tags":[32],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.6.1 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Swift Development Services - Apple\u2019s Journey from Objective-C to Swift<\/title>\n<meta name=\"description\" content=\"Looking for Swift Development Services for your next iOS app. Check out different aspects with us or hire our developers!\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Swift Development Services - Apple\u2019s Journey from Objective-C to Swift\" \/>\n<meta property=\"og:description\" content=\"Looking for Swift Development Services for your next iOS app. Check out different aspects with us or hire our developers!\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/\" \/>\n<meta property=\"og:site_name\" content=\"Unified Infotech\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/unifiedinfotech\/\" \/>\n<meta property=\"article:published_time\" content=\"2015-01-05T18:16:17+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-05-20T12:31:19+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.unifiedinfotech.net\/blog\/wp-content\/uploads\/2015\/01\/ios-swift-580x415-1.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1890\" \/>\n\t<meta property=\"og:image:height\" content=\"986\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"author\" content=\"Pratip Biswas\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@unified_infotec\" \/>\n<meta name=\"twitter:site\" content=\"@unified_infotec\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Pratip Biswas\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"14 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Article\",\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/\"},\"author\":{\"name\":\"Pratip Biswas\",\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/#\/schema\/person\/6678f51be7224e0dee5a17bc2d8a5428\"},\"headline\":\"Swift Development Services\",\"datePublished\":\"2015-01-05T18:16:17+00:00\",\"dateModified\":\"2022-05-20T12:31:19+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/\"},\"wordCount\":2838,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/#organization\"},\"keywords\":[\"Swift Development Services\"],\"articleSection\":[\"All\",\"Mobile\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/#respond\"]}]},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/\",\"url\":\"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/\",\"name\":\"Swift Development Services - Apple\u2019s Journey from Objective-C to Swift\",\"isPartOf\":{\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/#website\"},\"datePublished\":\"2015-01-05T18:16:17+00:00\",\"dateModified\":\"2022-05-20T12:31:19+00:00\",\"description\":\"Looking for Swift Development Services for your next iOS app. Check out different aspects with us or hire our developers!\",\"breadcrumb\":{\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.unifiedinfotech.net\/blog\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Swift Development Services\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/#website\",\"url\":\"https:\/\/www.unifiedinfotech.net\/blog\/\",\"name\":\"Unified Infotech\",\"description\":\"\",\"publisher\":{\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.unifiedinfotech.net\/blog\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/#organization\",\"name\":\"Unified Infotech\",\"url\":\"https:\/\/www.unifiedinfotech.net\/blog\/\",\"sameAs\":[\"https:\/\/www.instagram.com\/unified.infotech\/\",\"https:\/\/www.linkedin.com\/company\/unifiedinfotech\/\",\"https:\/\/www.facebook.com\/unifiedinfotech\/\",\"https:\/\/twitter.com\/unified_infotec\"],\"logo\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/#\/schema\/logo\/image\/\",\"url\":\"https:\/\/www.unifiedinfotech.net\/blog\/wp-content\/uploads\/2019\/06\/LinkedIn-Company-Logo-Image-black.jpg\",\"contentUrl\":\"https:\/\/www.unifiedinfotech.net\/blog\/wp-content\/uploads\/2019\/06\/LinkedIn-Company-Logo-Image-black.jpg\",\"width\":300,\"height\":300,\"caption\":\"Unified Infotech\"},\"image\":{\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/#\/schema\/logo\/image\/\"}},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/#\/schema\/person\/6678f51be7224e0dee5a17bc2d8a5428\",\"name\":\"Pratip Biswas\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.unifiedinfotech.net\/blog\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/b8a39b993d92d9c5bcc87bd89223b371?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/b8a39b993d92d9c5bcc87bd89223b371?s=96&d=mm&r=g\",\"caption\":\"Pratip Biswas\"},\"description\":\"I am an Entrepreneur and a Tech Geek with more than 1500 successful projects launched. I share my experience through my love for writing and help other entrepreneurs reach their business goals.\",\"sameAs\":[\"https:\/\/www.unifiedinfotech.net\/\"]}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Swift Development Services - Apple\u2019s Journey from Objective-C to Swift","description":"Looking for Swift Development Services for your next iOS app. Check out different aspects with us or hire our developers!","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/","og_locale":"en_US","og_type":"article","og_title":"Swift Development Services - Apple\u2019s Journey from Objective-C to Swift","og_description":"Looking for Swift Development Services for your next iOS app. Check out different aspects with us or hire our developers!","og_url":"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/","og_site_name":"Unified Infotech","article_publisher":"https:\/\/www.facebook.com\/unifiedinfotech\/","article_published_time":"2015-01-05T18:16:17+00:00","article_modified_time":"2022-05-20T12:31:19+00:00","og_image":[{"width":1890,"height":986,"url":"https:\/\/www.unifiedinfotech.net\/blog\/wp-content\/uploads\/2015\/01\/ios-swift-580x415-1.jpg","type":"image\/jpeg"}],"author":"Pratip Biswas","twitter_card":"summary_large_image","twitter_creator":"@unified_infotec","twitter_site":"@unified_infotec","twitter_misc":{"Written by":"Pratip Biswas","Est. reading time":"14 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Article","@id":"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/#article","isPartOf":{"@id":"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/"},"author":{"name":"Pratip Biswas","@id":"https:\/\/www.unifiedinfotech.net\/blog\/#\/schema\/person\/6678f51be7224e0dee5a17bc2d8a5428"},"headline":"Swift Development Services","datePublished":"2015-01-05T18:16:17+00:00","dateModified":"2022-05-20T12:31:19+00:00","mainEntityOfPage":{"@id":"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/"},"wordCount":2838,"commentCount":0,"publisher":{"@id":"https:\/\/www.unifiedinfotech.net\/blog\/#organization"},"keywords":["Swift Development Services"],"articleSection":["All","Mobile"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/#respond"]}]},{"@type":"WebPage","@id":"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/","url":"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/","name":"Swift Development Services - Apple\u2019s Journey from Objective-C to Swift","isPartOf":{"@id":"https:\/\/www.unifiedinfotech.net\/blog\/#website"},"datePublished":"2015-01-05T18:16:17+00:00","dateModified":"2022-05-20T12:31:19+00:00","description":"Looking for Swift Development Services for your next iOS app. Check out different aspects with us or hire our developers!","breadcrumb":{"@id":"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.unifiedinfotech.net\/blog\/swift-development-services-apples-journey-from-swift-to-objective-c\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.unifiedinfotech.net\/blog\/"},{"@type":"ListItem","position":2,"name":"Swift Development Services"}]},{"@type":"WebSite","@id":"https:\/\/www.unifiedinfotech.net\/blog\/#website","url":"https:\/\/www.unifiedinfotech.net\/blog\/","name":"Unified Infotech","description":"","publisher":{"@id":"https:\/\/www.unifiedinfotech.net\/blog\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.unifiedinfotech.net\/blog\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Organization","@id":"https:\/\/www.unifiedinfotech.net\/blog\/#organization","name":"Unified Infotech","url":"https:\/\/www.unifiedinfotech.net\/blog\/","sameAs":["https:\/\/www.instagram.com\/unified.infotech\/","https:\/\/www.linkedin.com\/company\/unifiedinfotech\/","https:\/\/www.facebook.com\/unifiedinfotech\/","https:\/\/twitter.com\/unified_infotec"],"logo":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.unifiedinfotech.net\/blog\/#\/schema\/logo\/image\/","url":"https:\/\/www.unifiedinfotech.net\/blog\/wp-content\/uploads\/2019\/06\/LinkedIn-Company-Logo-Image-black.jpg","contentUrl":"https:\/\/www.unifiedinfotech.net\/blog\/wp-content\/uploads\/2019\/06\/LinkedIn-Company-Logo-Image-black.jpg","width":300,"height":300,"caption":"Unified Infotech"},"image":{"@id":"https:\/\/www.unifiedinfotech.net\/blog\/#\/schema\/logo\/image\/"}},{"@type":"Person","@id":"https:\/\/www.unifiedinfotech.net\/blog\/#\/schema\/person\/6678f51be7224e0dee5a17bc2d8a5428","name":"Pratip Biswas","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.unifiedinfotech.net\/blog\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/b8a39b993d92d9c5bcc87bd89223b371?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/b8a39b993d92d9c5bcc87bd89223b371?s=96&d=mm&r=g","caption":"Pratip Biswas"},"description":"I am an Entrepreneur and a Tech Geek with more than 1500 successful projects launched. I share my experience through my love for writing and help other entrepreneurs reach their business goals.","sameAs":["https:\/\/www.unifiedinfotech.net\/"]}]}},"_links":{"self":[{"href":"https:\/\/www.unifiedinfotech.net\/blog\/wp-json\/wp\/v2\/posts\/3401"}],"collection":[{"href":"https:\/\/www.unifiedinfotech.net\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.unifiedinfotech.net\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.unifiedinfotech.net\/blog\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.unifiedinfotech.net\/blog\/wp-json\/wp\/v2\/comments?post=3401"}],"version-history":[{"count":11,"href":"https:\/\/www.unifiedinfotech.net\/blog\/wp-json\/wp\/v2\/posts\/3401\/revisions"}],"predecessor-version":[{"id":13798,"href":"https:\/\/www.unifiedinfotech.net\/blog\/wp-json\/wp\/v2\/posts\/3401\/revisions\/13798"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.unifiedinfotech.net\/blog\/wp-json\/wp\/v2\/media\/3402"}],"wp:attachment":[{"href":"https:\/\/www.unifiedinfotech.net\/blog\/wp-json\/wp\/v2\/media?parent=3401"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.unifiedinfotech.net\/blog\/wp-json\/wp\/v2\/categories?post=3401"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.unifiedinfotech.net\/blog\/wp-json\/wp\/v2\/tags?post=3401"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}